import streamlit as st
import google.generativeai as genai
import pandas as pd
import base64

# Configure API key
api_key = "AIzaSyAxz3eWwhOlP-g3Cws-O153RGnxoidGv_0"
genai.configure(api_key=api_key)

# Function to load Google Gemini Pro and get response
def get_gemini_response(prompt):
    model = genai.GenerativeModel('gemini-pro')
    response = model.generate_content([prompt])
    if not response or not response.parts:
        st.error("No valid response returned. The content might have been blocked.")
        return "No valid response returned. Please check the input requirements."
    return response.parts[0].text

# Streamlit UI
st.title("Generate Test Cases")

# Input for user requirements
requirement = st.text_area("Enter the requirements for generating test cases:")

# Generate test cases based on user input
if st.button("Generate Test Cases"):
    test_cases = get_gemini_response(requirement)

    # Display the generated test cases
    st.subheader("Generated Test Cases:")
    st.write(test_cases)

    # Convert to DataFrame with each test case in a separate row
    test_cases_list = [case.strip() for case in test_cases.split('\n') if case.strip()]
    df = pd.DataFrame({"Test Cases": test_cases_list})

    # Display the DataFrame
    st.subheader("Generated Test Cases (Formatted):")
    st.write(df)

    # Download link for Excel
    csv = df.to_csv(index=False)  # Convert DataFrame to CSV format
    b64 = base64.b64encode(csv.encode()).decode()  # Encode to base64 (binary to text)
    href = f'<a href="data:file/csv;base64,{b64}" download="generated_test_cases.csv">Download CSV File</a>'
    st.markdown(href, unsafe_allow_html=True)
