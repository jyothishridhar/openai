import streamlit as st
import google.generativeai as genai
import pandas as pd
import base64
from io import BytesIO
import os
from openpyxl import Workbook
from openpyxl.styles import PatternFill, Font
from openpyxl.utils.dataframe import dataframe_to_rows

# Configure API key
api_key = "AIzaSyAxz3eWwhOlP-g3Cws-O153RGnxoidGv_0"
genai.configure(api_key=api_key)

# Function to load Google Gemini Pro and get response
def get_gemini_response(prompt):
    model = genai.GenerativeModel('gemini-pro')
    response = model.generate_content([prompt])
    if not response or not response.parts:
        st.error("No valid response returned. The content might have been blocked.")
        return "No valid response returned. Please check the input requirements."
    return response.parts[0].text

# Streamlit UI
st.title("Generate Test Cases")

# Input for user requirements
requirement = st.text_area("Enter the requirements for generating test cases:")

# Generate test cases based on user input
if st.button("Generate Test Cases"):
    test_cases = get_gemini_response(requirement)

    # Display the generated test cases
    st.subheader("Generated Test Cases:")
    st.write(test_cases)

    # Convert to DataFrame with each test case in a separate row
    test_cases_list = [case.strip() for case in test_cases.split('\n') if case.strip()]
    df = pd.DataFrame({"Test Cases": test_cases_list})

    # Display the DataFrame
    st.subheader("Generated Test Cases (Formatted):")
    st.write(df)

    local_file_path = "C:\\SEM_automation_Excel_Reports\\data.xlsx"
    directory = os.path.dirname(local_file_path)

    # Debug print to check the directory and path
    # st.write(f"Local file path: {local_file_path}")
    # st.write(f"Directory: {directory}")

    # Ensure the directory exists if directory path is not empty
    # Ensure the directory exists if directory path is not empty
    if directory and not os.path.exists(directory):
        os.makedirs(directory)
        st.write(f"Directory created: {directory}")

    # Save DataFrame to local Excel file
    with pd.ExcelWriter(local_file_path, engine='openpyxl') as writer:
        df.to_excel(writer, index=False, sheet_name='Sheet1')
        workbook = writer.book
        worksheet = writer.sheets['Sheet1']

        # Define header styles
        header_fill = PatternFill(start_color='C0C0C0', end_color='C0C0C0', fill_type='solid')
        header_font = Font(color='FFFFFF', bold=True)
        for cell in worksheet[1]:
            cell.fill = header_fill
            cell.font = header_font

        # Adjust column widths
        padding = 5
        specific_columns = {
            0: 15, 1: 15, 2: 15, 3: 40, 4: 18, 5: 30, 6: 22, 7: 30, 8: 18, 9: 15
        }
        for i, column in enumerate(worksheet.columns):
            if i in specific_columns:
                adjusted_width = specific_columns[i]
            else:
                max_length = 0
                column = [cell for cell in column]
                for cell in column:
                    try:
                        if len(str(cell.value)) > max_length:
                            max_length = len(cell.value)
                    except:
                        pass
                adjusted_width = (max_length + padding)
            worksheet.column_dimensions[column[0].column_letter].width = adjusted_width

    st.success(f"File saved successfully at {local_file_path}")

    # Provide download button for the Excel file
    st.download_button(
        label="Download data as Excel",
        data=open(local_file_path, 'rb'),
        file_name="data.xlsx",
        mime="application/vnd.openxmlformats-officedocument.spreadsheetml.sheet"
    )

        
